---
import { Icon } from '@astrojs/starlight/components';
import Badge from './Badge.astro';

// Add to allow for replacement Astro.props.sublist.map...
// isNested == customProp to make filtering only used at the top level so that max loop is O(n)
const { sublist, isNested } = Astro.props;

/**
 * @name items
 * @description If Top level, check if entries contains a current item in which case return just that
 * @description Use this to make each "directroy" of the content/docs folder feel like it's own subsection of docs
 * 
 * Note - Temporary hack until multiple sidebars is officially added to Astro
 */
let items = isNested ? sublist : sublist.filter((item: any) => {
	if (item.type === "group") {
		for (const e of item.entries) {
			if (e.isCurrent) return item;
			if (e.type === "group") {
				for (const e2 of e.entries) {
					if (e2.type === "group") {
						for (const e3 of e2.entries) {
							if (e3.isCurrent) return item;
						}
					}
					if (e2.isCurrent) return item;
				}
			}

			// if (e.isCurrent) return item;
		}
	}
});


const isGroupOpen = (group: any): boolean => {
	if (group.isCurrent) return true;
	for (const entry of group.entries) {
		if (entry.isCurrent) return true;
		if (entry.type === 'group' && isGroupOpen(entry)) return true;
	}
	return false;
};

---

<ul class:list={{ 'top-level': !isNested }}>
	{
		// Replaced Astro.props.sublist.map...
		items.map((entry: any) => {
			return (
				<li>
					{entry.type === 'link' ? (
						<a
							href={entry.href}
							aria-current={entry.isCurrent && 'page'}
						>
							<span>{entry.label}</span>
							{entry.badge && (
								<>
									{' '}
									<Badge
										text={entry.badge.text}
										variant={entry.isCurrent ? 'outline' : entry.badge.variant}
									/>
								</>
							)}
						</a>
					) : (
						<details open={isGroupOpen(entry)} >
							<summary>
								<span class="large">{entry.label}</span>
								<Icon name="right-caret" class="caret" size="1.25rem" />
							</summary>
							<Astro.self sublist={entry.entries} isNested={true} nested />
						</details>
					)}
				</li>
			);
		})
	}
</ul>

<style>
	ul {
		--sl-sidebar-item-padding-inline: 0.5rem;
		list-style: none;
		padding: 0;
	}

	li {
		overflow-wrap: anywhere;
	}

	ul ul li {
		margin-inline-start: var(--sl-sidebar-item-padding-inline);
		border-inline-start: 1px solid var(--sl-color-hairline-light);
		padding-inline-start: var(--sl-sidebar-item-padding-inline);
	}

	.large {
		font-size: var(--sl-text-lg);
		font-weight: 600;
		color: var(--sl-color-white);
	}

	.top-level > li + li {
		margin-top: 0.75rem;
	}

	summary {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding-inline: var(--sl-sidebar-item-padding-inline);
		cursor: pointer;
		user-select: none;
	}
	summary::marker,
	summary::-webkit-details-marker {
		display: none;
	}

	.caret {
		transition: transform 0.2s ease-in-out;
		flex-shrink: 0;
	}
	:global([dir='rtl']) .caret {
		transform: rotateZ(180deg);
	}
	[open] > summary .caret {
		transform: rotateZ(90deg);
	}

	a {
		display: block;
		border-radius: 0.25rem;
		text-decoration: none;
		color: var(--sl-color-gray-2);
		padding: 0.3em var(--sl-sidebar-item-padding-inline);
		line-height: 1.4;
	}

    a:hover,
    a:focus {
        color: var(--sl-color-white);
        background-color: var(--sl-color-hover);
    }

	[aria-current='page'],
	[aria-current='page']:hover,
	[aria-current='page']:focus {
		font-weight: 600;
		color: var(--sl-color-text-invert);
		background-color: var(--sl-color-text-accent);
	}

	a > *:not(:last-child) {
		margin-inline-end: 0.25em;
	}

	@media (min-width: 50rem) {
		.top-level > li + li {
			margin-top: 0.5rem;
		}
		.large {
			font-size: var(--sl-text-base);
		}
		a {
			font-size: var(--sl-text-sm);
		}
	}
</style>